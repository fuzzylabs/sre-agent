services:
  slack:
    build:
      context: sre_agent
      dockerfile: servers/slack/Dockerfile
    environment:
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_TEAM_ID=${SLACK_TEAM_ID}
      - TRANSPORT=SSE
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3001"]
      interval: 5s
      timeout: 3s
      retries: 5

  kubernetes:
    build:
      context: sre_agent/servers/mcp-server-kubernetes
      dockerfile: Dockerfile
    volumes:
      - ~/.aws:/home/appuser/.aws

    environment:
      - TRANSPORT=SSE
      - AWS_REGION=${AWS_REGION}
      - TARGET_EKS_CLUSTER_NAME=${TARGET_EKS_CLUSTER_NAME}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3001"]
      interval: 5s
      timeout: 3s
      retries: 5
  github:
    build:
      context: sre_agent
      dockerfile: servers/github/Dockerfile
    environment:
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
      - TRANSPORT=SSE
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3001"]
      interval: 5s
      timeout: 3s
      retries: 5

  prompt_server:
    build:
      context: .
      dockerfile: sre_agent/servers/prompt_server/Dockerfile
    environment:
      - GITHUB_ORGANISATION=fuzzylabs
      - GITHUB_REPO_NAME=microservices-demo
      - PROJECT_ROOT=src
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3001"]
      interval: 5s
      timeout: 3s
      retries: 5

  llm-server:
    build:
      context: .
      dockerfile: sre_agent/llm/Dockerfile
    environment:
      - PROVIDER=anthropic
      - MODEL=claude-3-7-sonnet-latest
      - MAX_TOKENS=1000
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8000"] # Correct port 8000
      interval: 5s
      timeout: 3s
      retries: 5

  orchestrator:
    build:
      context: .
      dockerfile: sre_agent/client/Dockerfile
    ports:
      - "8003:80"

    depends_on:
      slack:
        condition: service_healthy
      github:
        condition: service_healthy
      kubernetes:
        condition: service_healthy
      prompt_server:
        condition: service_healthy
      llm-server:
        condition: service_healthy

    environment:
      - DEV_BEARER_TOKEN=${DEV_BEARER_TOKEN}
      - QUERY_TIMEOUT=${QUERY_TIMEOUT}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - TOOLS=${TOOLS}
      - CHANNEL_ID=${CHANNEL_ID}
